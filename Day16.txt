--------------------------------------
Author- Anshu Kumar Singh a.k.a. Sidam
Purpose- Notes of Learning C++
Date - 06/04/2022

Day16 Of Learning C++
--------------------------------------

    * --Passing Arrays in Functions--
    *
    * We know that when we give vars as arguments, their memory locations don't go, just their values does.
    * Well, that isn't possibly the case for Arrays. The compiler can't possibly make a copy of the whole 
    * array. So, it's location goes, which is the location of it's first element. So, that will mean 
    * that you can alter an array given as argument.
    * 
    * So, to help ourselves we can use the "const" keyword. It will make that array a constant and 
    * un-changable.
    * 
    * --Passing by Reference--
    * 
    * Sometimes we just need our argument to be changed in a function, but we can't possibly do it 
    * since the fns make a copy of the arguments given. 
    * We can use the reference operator '&'. If we add an '&' ahead of a var, it's location is sent 
    * and a copy is not made. Good thing is that you can save space through this. And downside is 
    * that the value can be changed in the fn. It's good if that's what you need but if you don't, 
    * you can use "const". Then it's a win-win, you save space by not making a copy and you make it
    * un-changable too.
    * 
    * --Scopes--
    * 
    * Variables have scopes, it's like their boundaries. A var created in the main fn can't be accessed
    * in another var, it is that var's local boundary.
    * 
    * Local var- Created within "{}" and can only be accessed within only those specific "{}".
    * 
    * Global var- Created outside of any fn, mainly below header files and can be accessed by all.
    * 
    * Static var- Created within "{}" but can be accessed by all, and can only be changed within 
    *             those specific "{}". 
    * 
    * --Function Call Stack Mamory Allocation--
    * 
    * This is something used to under stand how functions work, which one works first and stuff.
    * Think it like a pile of books. One is on top of another. Think that they are functions. If 
    * you want to take one out from the middle you have to take others above that one out before it.
    * You can't put books in the middle. 
    * 
    * Pop and Push are terms used in this. Pop means a fn which is called STACK FRAME is taken out and
    * pushed means it was pushed, meaning added into the Call stack (The pile of books, just that there
    * are fns instead of books). One that goes last, comes out first, also said in a better way-
    * LAST IN, FIRST OUT
    * 
    * Note: Stack Frame or a fn in Call Stack is also calld Activision Record.
    * 
    * So, when a fn is called, it's activision record is created and pushed in the call stack and when 
    * it's terminated it pops out of call stack.
    * 
    * Also, the size of Stack is limited and can cause errors if you push too many fns in the stack.
    * This is called Stack Overflow, Yup, now you know what the name of that website means.
    * 
    * --Inline Functions--
    * 
    * When we execute a fn, it is pushed into the stack frame does it's work, is popped out. All that can 
    * take a bit more time. It will still be fast for us but seeing the speed computers do stuff, that 
    * will be slow. And that is ok for bigger functions it's nice. But for small fn, it's a disadvantage
    * because you can't literally do it without the fn and it will be faster. So, we use inline 
    * keyword in front of the fns. Well, it was used in old times, now our compilers have gotten so 
    * smart, they make short fns inline themselves. So, it's not needed anymore, still, you should just 
    * know that it exists.
    * 
    * --Recursions--
    * When a function is used inside itself, it is called a recursion. This may come in handy a lot of
    * times. The two examples of recursion are Fabonacci and Factorial programs.
    * 
    * Next- A problem and then Pointers, Dereferencing, Heap Memory Allocation and Notation.

