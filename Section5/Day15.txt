--------------------------------------
Author- Anshu Kumar Singh a.k.a. Sidam
Purpose- Notes of Learning C++
Date - 05/04/2022

Day15 Of Learning C++
--------------------------------------


    * Today we'll get to know alot about functions.
    * There are three ways for us to use them-
    * 
    * 1. Functions in C++ standard library that we access through the Header files.
    * 2. Third party libraries and their functions.
    * 3. Our own functions that we'll make.
    * 
    * Functions separate code into logical self-contained units.
    * 
    * To understand them more you should search about Functions Boss/Worker analogy, it's 
    * best for explanation.
    * 
    * Let's see some header files and their functions.
    * 
    * <cmath>
    * 
    * sqrt() - Square root of a number.
    * cbrt() - Cube root of a number.
    * sin() - Sin of a number.
    * cos() - cos of a number.
    * ceil() - Rounds the number to the nearest integer above it's current value.
    * floor() - Rounds the number to the nearest integer below it's current value.
    * Round() - Rounds the number to the nearest integer value.
    * pow() - Puts the second argument as the power of the first argument.
    * 
    * Memory tip for ceil and floor- Ceil is like ceiling of a room which is above us, and floor
    * as the floor of a room which is below us.
    * 
    * <cstdlib>
    * 
    * rand() - Generates a random value, between 0 to RAND_MAX(A value that on systems).
    * srand() - Random values of rand() aren't exactly random, you prepare it with this. Search the
    * net for more details on how to do it.
    * 
    * <iomanip>
    * 
    * This header includes stuff with which we can adjust out inputs and outputs, one of the many uses
    * is-
    * 
    * cout << fixed << setprecision(2);
    * Now all the double or float outputs will have just two decimal numbers. There are alot more
    * that you can know about just use the internet.
    * 
    * 
    * --Defining a Function--
    * 
    * Now, let's see how to create a function, four most important parts of creating a function is
    * its Name, Parameter list, Return type and Body.
    * 
    * Syntax-
    * 
    * return_type function_name (parameter_type parameter_name)
    * {
    *       // Body;    
    * }
    * 
    * One of the function(fn) we've been using up until now is the main fn. And since it is a fn
    * itself we can't create other fns in it, we have to do it outside the main.
    * 
    * While using a function, you give arguments. In the definition of the functions, they are called
    * parameters.
    * 
    * Return type is what your function will return, like the function you have been using up until now,
    * the main fn, also returns 0, which is an integer value and that's what's the return type of 
    * main fn is. Return values normally come in the end, but as for your need you can put it anywhere
    * like in an if-else statement, for if this happens return this or that.
    *
    * If you don't want your fn to return anything, you can use the void datatype, then printing the
    * return statement becomes totally optional.
    * 
    * Let's see an examples-
    * 
    * int add (int a, int b)
    * { 
    *       return a+b;
    * }
    * 
    * another example-
    * 
    * void greet (string name)
    * {
    *       cout << "Hello" + name << endl;
    * }
    * 
    * --Function Prototypes--
    * 
    * Also called Forward Decloration.
    * Creating lots of fns before the main can make the whole code look messy and complicated, to help
    * ourselves with that we can put them below the main fn, but that may cause a problem because when 
    * a fn is called, the main fn searches for it above itself not below, thus the fn won't be found 
    * and it will cause errors.
    * 
    * We can use fn Prototypes for those moments. It tells the compiler what it needs to know without the
    * full function definition. We can just put the first line of definition of a function
    * at the top with a semicolon, that will be it's prototype and that will tell the main fn that this
    * fn exists. The prototype only contains, return type, name and parameter types. You can also include
    * parameter names but that is totally optional. 
    * 
    * Let's see how will the prototypes of the above fn example will look like-
    * 
    * int add (int);
    * void greet (strig);
    * 
    * Note: You may think that you can alter your arguments in a fn then you are wrong. Argument's memory
    * location isn't given, there is a copy of it made which is used in the function so whatever you do
    * with the var you gave as parameter doesn't even touch the original var.
    * 
    * --Default Parameter--
    * 
    * You can set a parameter value as default. Just give a value after the parameter name and that will be
    * used when that argument is not given.
    * 
    * Ex-
    * int add (int, int b {2});
    * 
    * Here we gave the default value in the prototype, you can also give this in definitio. But don't give 
    * default values in both, that might cause errors.
    * 
    * Note: When you set a default value for an argument, all forthcoming argument also has to have to a 
    * default value. Not like, you can give a default value to the first and leave the second.
    * 
    * --Overloading a Function--
    * 
    * Overloading a fn means using the same name for the various forms of the same fn.
    * Like a fn for adding, but since there are multiple datatypes you might need fns with different 
    * return type for differnt arguments. Like this-
    * 
    * int add (int, int);
    * double add (double, double);
    * double add (doulbe, int); // The int will be promoted to double.
    * 
    * The compiler will see what type are the arguments of, and then decide which one to use.
    * 
    * Note: If overloaded fns dont' have any parameters, the compiler will have problems diciding which one
    * to use, and as I know the compiler, it's so lazy, it won't decide, it will just throw an error.
    * 
    * Next- Passing Arrays, Passing by reference, Scopes, Call Stack Memory Allocations, Inline Functions 
    * Recursions.